-- CC-DOS v1.5 - Storage API

-- Variables
local build = {}

build.dosdir = "CC-DOS"
build.version = "1.5"

-- Functions
function getDrives()
    local file = fs.open(build.dosdir.."/cache/drives.dat","r")
    local drives = textutils.unserialize(file.readAll())
    if drives == nil then
    	drives = {}
    end
    file.close()
    return drives
end

function isRegistered(loc,mnt)
    local drives = getDrives()
    for k,v in pairs(drives) do
        if v.LOCATION == loc and v.NAME == mnt then
            return true
        end
    end
    return false
end

local function serializeDrive(drive)
    local disk = {}
    for k,v in pairs(drive) do
        disk[k] = v
    end
    return disk
end

local function serializeDrives(drives)
    local disks = {}
    for k,v in pairs(drives) do
        disks[#disks+1] = serializeDrive(v)
    end
    return disks
end

local function register(drv)
    local drives = getDrives()
    for k,v in pairs(drives) do
    	if v.PATH == drv.PATH then
    		return false
    	end
    end
    if not isRegistered(drv.LOCATION,drv.NAME) then
        drives[#drives+1] = drv
    end
    local file = fs.open(build.dosdir.."/cache/drives.dat","w")
    file.write(textutils.serialize(serializeDrives(drives)))
    file.close()
    return true
end

function addDrive(mnt,loc)
    if loc == nil then
    	local sides = {"right","left","top","bottom","front","back"}
        for k,v in pairs(sides) do
            local drv = addDrive(mnt,v)
            if drv == false then
            else
            	return drv
            end
		end
    else
        return Drive(loc,mnt)
    end
    return false
end

-- Classes

function Drive(location,mount)
    local self = {}
    if isRegistered(location,mount) then
    	return false
    end
    
    if location == "hdd" then
        self.LOCATION = location
        self.NAME = mount
        self.TYPE = "HDD"
        self.PATH = "/"
        self.LABEL = "CC-DOS"
        self.FREE_MEM = fs.getFreeSpace(self.PATH)
        if register(self) == true then
        	return self
        end
    elseif disk.isPresent(location) and disk.hasData(location) then
        self.LOCATION = location
        self.NAME = mount
        self.TYPE = "FDD"
        self.PATH = disk.getMountPath(self.LOCATION)
        self.LABEL = "FDD-"..mount
        self.FREE_MEM = fs.getFreeSpace(self.PATH)
        if register(self) == true then
        	return self
        end
    else
        return false
    end
    return false
end
